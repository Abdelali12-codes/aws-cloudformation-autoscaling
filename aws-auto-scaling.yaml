Parameters:
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'


  InstanceType:
    Description: Amazon EC2 instance type for the instances
    Type: String
    AllowedValues:
      - t3.micro
      - t2.micro
      - t2.medium
    Default: t2.medium

  Subnets:
    Type: 'List<AWS::EC2::Subnet::Id>'
    Description: A list of subnets for the Auto Scaling group

  Vpc:
     Type: 'AWS::EC2::VPC::Id'
     Description: the vpc id  

  Name:
     Type: String
     Description: The Name Parameter
     Default: Abdelali


Mappings:
  RegionMap:
    eu-west-3:
      AMI:  ami-0f5094faf16f004eb 
    

Resources:
  myLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Metadata:
      AWS::CloudFormation::Init: 
        config:
            files:
              "/home/ec2-user/script.sh":
                content: !Sub |
                        #!/bin/bash
                        sudo amazon-linux-extras install nginx1 -y
                        sudo service nginx start
                        sudo yum install ruby -y
                        sudo yum install wget -y
                        cd /home/ec2-user
                        sudo wget https://aws-codedeploy-us-east-1.s3.amazonaws.com/latest/install
                        sudo chmod +x ./install
                        sudo ./install auto
                mode: "000744"
                owner: "ec2-user"
                group: "ec2-user"
              "/usr/share/nginx/html/index.html":
                content: !Sub |
                        <h1> Hi My name is ${Name} </h1>
                mode: "000644"
                owner: "root"
                group: "root"
                # The cfn-hup.conf file stores the name of the stack and the AWS credentials that the cfn-hup daemon targets.
              "/etc/cfn/cfn-hup.conf":
                content: !Sub |
                  [main]
                  stack=${AWS::StackId}
                  region=${AWS::Region}
                  # The interval used to check for changes to the resource metadata in minutes. Default is 15
                  interval=2
                mode: "000400"
                owner: "root"
                group: "root"
              # The user actions that the cfn-hup daemon calls periodically are defined in the hooks.conf configuration file.
              # To support composition of several applications deploying change notification hooks, cfn-hup supports a directory named hooks.d that is located in the hooks configuration directory. You can place one or more additional hooks configuration files in the hooks.d directory. The additional hooks files must use the same layout as the hooks.conf file.
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
                content: !Sub |
                  [cfn-auto-reloader-hook]
                  triggers=post.update
                  path=Resources.WebServerHost.Metadata.AWS::CloudFormation::Init
                  action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServerHost --region ${AWS::Region}
                mode: "000400"
                owner: "root"
                group: "root"
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template
      LaunchTemplateData:
        #ImageId:  !FindInMap 
        #  - RegionMap
        #  - !Ref 'AWS::Region'
        #  - AMI
        ImageId: ami-0f5094faf16f004eb 
        InstanceType: !Ref InstanceType
        #NetworkInterfaces:
        #  - DeviceIndex: 0
        #    AssociatePublicIpAddress: true
        #    Groups:
        #      - sg-0a379288ef0bd9430
        #    DeleteOnTermination: true
        KeyName: !Ref KeyName
        IamInstanceProfile:
          Name: !Ref myInstanceProfile
        SecurityGroupIds:
         - !GetAtt 
           - InstanceSecurityGroup
           - GroupId


        UserData: 
         Fn::Base64: !Sub |
              
               #!/bin/bash
               yum update -y aws-cfn-bootstrap
               # Start cfn-init 
               /opt/aws/bin/cfn-init -s ${AWS::StackId} -r myLaunchTemplate --region ${AWS::Region} || error_exit 'Failed to run cfn-init'
               # Run the script
               sudo bash /home/ec2-user/script.sh
               # cfn-hup daemon
               /opt/aws/bin/cfn-hup || error_exit 'Failed to start cfn-hup'
               # all dones succefully send signal
               /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource myASG --region ${AWS::Region}
      
        TagSpecifications:
        - ResourceType: instance
          Tags:
          - Key: environment
            Value: development
        - ResourceType: volume
          Tags:
          - Key: environment
            Value: development


  myInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: InstanceRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: 'Allow'
          Principal:
            Service:
            - 'ec2.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::080266302756:policy/s3fullaccessPolicy'

  myInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: '/'
      Roles:
      - !Ref myInstanceRole
  
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      Tags:
         - Key: Name
           Value: cloudformation-sg
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !GetAtt 
                - LoadBalancerSg
                - GroupId
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0

  LoadBalancerSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      Tags:
         - Key: Name
           Value: cloudformation-sg
      VpcId: !Ref Vpc
      SecurityGroupIngress:

        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0


  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:   
      Name: clouformation-loadbalancer
      Scheme: internet-facing
      SecurityGroups: 
        - !Ref LoadBalancerSg
      Subnets: !Ref Subnets
      Tags: 
        - Key: Name
          Value: cloudformation-loadbalancer
      Type: application

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      HealthCheckPath: /
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      Name: cloudformation-targetgroup
      Port: 80
      Protocol: HTTP
      Tags: 
        - Key: Name
          Value: cloudformation-targetgroup
      VpcId: !Ref Vpc


  Listener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: '80'
      Protocol: HTTP
  
  ListenerRule1: 
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Conditions:
        - Field: http-request-method
          HttpRequestMethodConfig:
            Values:
              - POST
      ListenerArn: !Ref Listener
      Priority: 1

      
  myASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref myLaunchTemplate
        Version: !GetAtt 
           - myLaunchTemplate
           - LatestVersionNumber

      MaxSize: '3'
      MinSize: '1'
      DesiredCapacity: '1'
      TargetGroupARNs: 
        - !Ref TargetGroup
      VPCZoneIdentifier: !Ref Subnets

Outputs:
    LoadBalancer:
      Value: !GetAtt
        - LoadBalancer
        - DNSName
      Export:
         Name: !Sub ${AWS::StackName}-elbdns #pseudo parameter
    ElbHostedZoneId:
      Value: !GetAtt 
               - LoadBalancer
               - CanonicalHostedZoneID
      Export:
         Name: !Sub ${AWS::StackName}-elbhostedzoneId


  